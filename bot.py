import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.bot import BotCommand
from aiogram.filters import Command
from states import FormStartMenu
from aiogram.fsm.context import FSMContext
import handlers.flash.physics
import handlers.flash.physic_teor
import handlers.flash.physic_device
import handlers.flash.physic_formuls
import handlers.math
import handlers.exams.form_exam
import handlers.exams.exam_main
import handlers.exams.teor_exam
import handlers.exams.device_exam
import handlers.stats.statistics
import logging
import keyboards
from data import Data
import config
from func import GenTask
from aiogram.types import (
    Message,
    ReplyKeyboardRemove
)
# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤
data = Data()
router = Router()
gentask = GenTask()

#–∫–æ–º–∞–Ω–¥—ã
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="/start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="/cancel", description="–û—Ç–º–µ–Ω–∞")
    ]
    await bot.set_my_commands(commands)
# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Command(commands=['start']))
async def cmd_start(msg: Message, state: FSMContext):
    await state.set_state(FormStartMenu.start_cmd)
    await msg.answer(f"–ü—Ä–∏–≤–µ—Ç {msg.from_user.username}! üòä")
    await msg.answer("–Ø —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è! üìöüå±\n"
                     "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —Ñ–æ—Ä–º—É–ª—ã,"
                     " –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è! üìùüí°\n"
                     )
    await msg.answer("–≠—Ç–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è. üöÄ\n–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∏–¥–µ–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è "
                     "–ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–æ–µ–π —Ä–∞–±–æ—Ç—ã, "
                     "–Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏!\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @wertikomoment."
                     )
    await msg.answer("–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
                     " ‚óè /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                     " ‚óè /cancel - –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è\n"
                     "P.S. –∫–æ–º–∞–Ω–¥—É /cancel –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–π –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏",
                     reply_markup=keyboards.kb_main
                     )
    data.add_user(msg.from_user.id, msg.from_user.username)

# –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
@router.message(Command(commands=['cancel']))
async def cmd_cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())

# –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    logger.error("Starting bot")

    bot = Bot(token=config.token, parse_mode=ParseMode.HTML)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_routers(router,
                       handlers.flash.physics.router,
                       handlers.flash.physic_formuls.router,
                       handlers.flash.physic_device.router,
                       handlers.flash.physic_teor.router,
                       handlers.math.router,
                       handlers.exams.exam_main.router,
                       handlers.exams.device_exam.router,
                       handlers.exams.teor_exam.router,
                       handlers.exams.form_exam.router,
                       handlers.stats.statistics.router
                       )
    data.create_table()

    await set_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    asyncio.run(main())